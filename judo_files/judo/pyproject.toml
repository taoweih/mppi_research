[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "judo-rai"
description = "Judo: a hackable sampling-based MPC toolbox"
version = "0.0.2"
readme = "README.md"
license = { file = "LICENSE" }
authors = [
    { name = "The Robotics and AI Institute" },
    { name = "Preston Culbertson" },
    { name = "Albert Li" },
    { name = "Simon Le Cleac'h" },
    { name = "Brandon Hung" },
]

requires-python = ">=3.10"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent"
]

dependencies = [
    "dora-utils",  # dora + qol utils for writing nodes
    "mujoco",
    "numpy",
    "pillow",  # for displaying app logo
    "requests",  # for sharing GUI link
    "rich",  # for displaying tables in benchmarking
    "scipy",
    "viser",
]

[project.urls]
"Documentation" = "https://bdaiinstitute.github.io/judo"

[project.scripts]
judo = "judo.cli:app"
benchmark = "judo.cli:benchmark"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["judo"]

[project.optional-dependencies]
docs = [
    "furo",
    "m2r2",
    "sphinx",
    "sphinx-autoapi",
    "sphinxcontrib-ansi-rai",
    "sphinxcontrib-programoutput-rai",
]
dev = [
    "judo-rai[docs]",
    "pre-commit",
    "pybind11-stubgen",
    "pyright",
    "pytest",
    "pytest-cov",
    "pytest-xdist",
    "ruff",
]

[tool.coverage.run]
source = ["./judo"]

[tool.pytest.ini_options]
addopts = "-n=8 --disable-warnings"
testpaths = [
    "tests",
]

[tool.pyright]
include = ["judo", "tests"]
exclude = [
    "**/__pycache__",
]
defineConstant = { DEBUG = true }
stubPath = "typings"

reportMissingImports = "warning"
reportMissingTypeStubs = false
reportPrivateImportUsage = false

pythonVersion = "3.13"
pythonPlatform = "Linux"

[tool.ruff]
line-length = 120
respect-gitignore = false
exclude=[
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "docs",
]

[tool.ruff.lint]
pydocstyle.convention = "google"
select = [
    "ANN",  # annotations
    "N",  # naming conventions
    "D",  # docstrings
    "B",  # flake8 bugbear
    "E",  # pycodestyle errors
    "F",  # Pyflakes rules
    "I",  # isort formatting
    "PLC",  # Pylint convention warnings
    "PLE",  # Pylint errors
    "PLR",  # Pylint refactor recommendations
    "PLW",  # Pylint warnings
]
ignore = [
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
    "D100",  # missing docstring in public module
    "D104",  # missing docstring in public package
    "D203",  # blank line before class docstring
    "D211",  # no blank line before class
    "D212",  # multi-line docstring summary at first line
    "D213",  # multi-line docstring summary at second line
    "E741",  # Ambiguous variable name. (l, O, or I)
    "E501",  # Line too long.
    "E721",  # Do not compare types, use `isinstance()`.
    "F722",  # Forward annotation false positive from jaxtyping. Should be caught by pyright.
    "F821",  # Forward annotation false positive from jaxtyping. Should be caught by pyright.
    "N803",  # Argument name should be lowercase
    "N806",  # Variable <variable> in function should be lowercase
    "N812",  # lowercase imported as non-lowercase
    "N817",  # CamelCase imported as acronym
    "PLR0911",  # Too many return statements
    "PLR0912",  # Too many branches (conditional statements)
    "PLR0913",  # Too many arguments in function definition
    "PLR0915",  # Too many statements in function
    "PLR2004",  # magic numbers
]

[tool.pixi.workspace]
channels = ["conda-forge"]
platforms = ["linux-64", "win-64", "osx-64"]

[tool.pixi.pypi-dependencies]
judo-rai = { path = ".", editable = true }

[tool.pixi.environments]
default = { solve-group = "default" }
docs = { features = ["docs"], solve-group = "default" }
dev = { features = ["dev", "docs"], solve-group = "default" }
